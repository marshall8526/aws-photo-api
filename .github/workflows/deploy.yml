name: Deploy to Amazon ECS

on:
  workflow_dispatch:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Create .env file
        run: |
          echo "NODE_ENV=production" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASS=${{ secrets.DB_PASS }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_SSL=${{ secrets.DB_SSL }}" >> .env
          echo "S3_REGION=${{ vars.S3_REGION }}" >> .env
          echo "S3_BUCKET_NAME=${{ vars.S3_BUCKET_NAME }}" >> .env
          echo "S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}" >> .env
          echo "S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }}" >> .env

      - name: Upload .env to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: '.env'
          target: '~/'

      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "‚û°Ô∏è Logging into Amazon ECR"
            aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            echo "‚¨áÔ∏è Pulling the new Docker image"
            docker pull ${{ steps.build-image.outputs.image }}

            echo "üßº Removing previous container"
            docker stop nest-app || true
            docker rm nest-app || true

            echo "üöÄ Starting container with .env"
            docker run -d \
              --env-file /home/ubuntu/.env \
              --name nest-app \
              -p 80:3000 \
              ${{ steps.build-image.outputs.image }}

            echo "üîç Checking container status..."
            sleep 5
            STATUS=$(docker inspect -f '{{.State.Status}}' nest-app)
            if [ "$STATUS" != "running" ]; then
              echo "‚ùå Container failed to start. Status: $STATUS"
              docker logs nest-app || true
              exit 1
            fi
            echo "‚úÖ Container is running."
